// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Infinitus.Core.Entities.External.Iugu;
//
//    var iuguInvoice = IuguInvoice.FromJson(jsonString);

using System;
using System.Collections.Generic;
using System.Linq;
using Newtonsoft.Json;

namespace InfinitusApp.Core.Data.DataModels.External.Iugu
{
    

    public partial class IuguInvoice
    {
        [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
        public string Id { get; set; }

        [JsonProperty("due_date", NullValueHandling = NullValueHandling.Ignore)]
        public string DueDate { get; set; }

        [JsonProperty("currency", NullValueHandling = NullValueHandling.Ignore)]
        public string Currency { get; set; }

        [JsonProperty("discount_cents")]
        public long? DiscountCents { get; set; }

        [JsonProperty("email", NullValueHandling = NullValueHandling.Ignore)]
        public string Email { get; set; }

        [JsonProperty("items_total_cents", NullValueHandling = NullValueHandling.Ignore)]
        public long? ItemsTotalCents { get; set; }

        [JsonProperty("notification_url")]
        public object NotificationUrl { get; set; }

        [JsonProperty("return_url")]
        public object ReturnUrl { get; set; }

        [JsonProperty("status", NullValueHandling = NullValueHandling.Ignore)]
        public string Status { get; set; }

        [JsonProperty("tax_cents")]
        public long? TaxCents { get; set; }

        [JsonProperty("updated_at", NullValueHandling = NullValueHandling.Ignore)]
        public string UpdatedAt { get; set; }

        [JsonProperty("total_cents", NullValueHandling = NullValueHandling.Ignore)]
        public long? TotalCents { get; set; }

        [JsonProperty("paid_at")]
        public string PaidAt { get; set; }

        [JsonProperty("commission_cents")]
        public long? CommissionCents { get; set; }

        [JsonProperty("secure_id", NullValueHandling = NullValueHandling.Ignore)]
        public string SecureId { get; set; }

        [JsonProperty("secure_url", NullValueHandling = NullValueHandling.Ignore)]
        public string SecureUrl { get; set; }

        [JsonProperty("customer_id")]
        public object CustomerId { get; set; }

        [JsonProperty("user_id")]
        public object UserId { get; set; }

        [JsonProperty("total", NullValueHandling = NullValueHandling.Ignore)]
        public string Total { get; set; }

        [JsonProperty("taxes_paid", NullValueHandling = NullValueHandling.Ignore)]
        public string TaxesPaid { get; set; }

        [JsonProperty("financial_return_date")]
        public string FinancialReturnDate { get; set; }

        [JsonProperty("commission", NullValueHandling = NullValueHandling.Ignore)]
        public string Commission { get; set; }

        [JsonProperty("interest")]
        public object Interest { get; set; }

        [JsonProperty("discount")]
        public object Discount { get; set; }

        [JsonProperty("created_at", NullValueHandling = NullValueHandling.Ignore)]
        public string CreatedAt { get; set; }

        [JsonProperty("refundable")]
        public bool? Refundable { get; set; }

        [JsonProperty("installments")]
        public long? Installments { get; set; }

        [JsonProperty("financial_return_dates")]
        public List<FinancialReturnDate> FinancialReturnDates { get; set; }

        [JsonProperty("bank_slip")]
        public BankSlip BankSlip { get; set; }

        [JsonProperty("items", NullValueHandling = NullValueHandling.Ignore)]
        public List<Item> Items { get; set; }

        [JsonProperty("variables", NullValueHandling = NullValueHandling.Ignore)]
        public List<Variable> Variables { get; set; }

        [JsonProperty("custom_variables", NullValueHandling = NullValueHandling.Ignore)]
        public List<CustomVariable> CustomVariables { get; set; }

        [JsonProperty("logs", NullValueHandling = NullValueHandling.Ignore)]
        public List<Log> Logs { get; set; }

        [JsonProperty("total_paid_cents", NullValueHandling = NullValueHandling.Ignore)]
        public long? TotalPaidCents { get; set; }

        [JsonProperty("taxes_paid_cents")]
        public long? TaxesPaidCents { get; set; }

        [JsonProperty("paid_cents")]
        public long? PaidCents { get; set; }

        [JsonProperty("cc_emails")]
        public object CcEmails { get; set; }

        [JsonProperty("payable_with", NullValueHandling = NullValueHandling.Ignore)]
        public string PayableWith { get; set; }

        [JsonProperty("overpaid_cents")]
        public object OverpaidCents { get; set; }

        [JsonProperty("ignore_due_email", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IgnoreDueEmail { get; set; }

        [JsonProperty("ignore_canceled_email")]
        public object IgnoreCanceledEmail { get; set; }

        [JsonProperty("advance_fee_cents")]
        public object AdvanceFeeCents { get; set; }

        [JsonProperty("early_payment_discount", NullValueHandling = NullValueHandling.Ignore)]
        public bool? EarlyPaymentDiscount { get; set; }

        [JsonProperty("order_id")]
        public object OrderId { get; set; }

        [JsonProperty("customer_ref")]
        public object CustomerRef { get; set; }

        [JsonProperty("customer_name")]
        public object CustomerName { get; set; }

        [JsonProperty("total_paid", NullValueHandling = NullValueHandling.Ignore)]
        public string TotalPaid { get; set; }

        [JsonProperty("total_overpaid", NullValueHandling = NullValueHandling.Ignore)]
        public string TotalOverpaid { get; set; }

        [JsonProperty("fines_on_occurrence_day")]
        public string FinesOnOccurrenceDay { get; set; }

        [JsonProperty("total_on_occurrence_day")]
        public string TotalOnOccurrenceDay { get; set; }

        [JsonProperty("fines_on_occurrence_day_cents")]
        public long? FinesOnOccurrenceDayCents { get; set; }

        [JsonProperty("total_on_occurrence_day_cents")]
        public long? TotalOnOccurrenceDayCents { get; set; }

        [JsonProperty("advance_fee")]
        public object AdvanceFee { get; set; }

        [JsonProperty("paid", NullValueHandling = NullValueHandling.Ignore)]
        public string Paid { get; set; }

        [JsonProperty("original_payment_id")]
        public object OriginalPaymentId { get; set; }

        [JsonProperty("double_payment_id")]
        public object DoublePaymentId { get; set; }

        [JsonProperty("created_at_iso", NullValueHandling = NullValueHandling.Ignore)]
        public string CreatedAtIso { get; set; }

        [JsonProperty("authorized_at")]
        public object AuthorizedAt { get; set; }

        [JsonProperty("authorized_at_iso")]
        public object AuthorizedAtIso { get; set; }

        [JsonProperty("expired_at")]
        public object ExpiredAt { get; set; }

        [JsonProperty("expired_at_iso")]
        public object ExpiredAtIso { get; set; }

        [JsonProperty("refunded_at")]
        public object RefundedAt { get; set; }

        [JsonProperty("refunded_at_iso")]
        public object RefundedAtIso { get; set; }

        [JsonProperty("canceled_at")]
        public object CanceledAt { get; set; }

        [JsonProperty("canceled_at_iso")]
        public object CanceledAtIso { get; set; }

        [JsonProperty("protested_at")]
        public object ProtestedAt { get; set; }

        [JsonProperty("protested_at_iso")]
        public object ProtestedAtIso { get; set; }

        [JsonProperty("chargeback_at")]
        public object ChargebackAt { get; set; }

        [JsonProperty("chargeback_at_iso")]
        public object ChargebackAtIso { get; set; }

        [JsonProperty("occurrence_date")]
        public string OccurrenceDate { get; set; }

        [JsonProperty("transaction_number", NullValueHandling = NullValueHandling.Ignore)]
        public long? TransactionNumber { get; set; }

        [JsonProperty("payment_method")]
        public string PaymentMethod { get; set; }

        [JsonProperty("early_payment_discounts", NullValueHandling = NullValueHandling.Ignore)]
        public List<object> EarlyPaymentDiscounts { get; set; }
    }

    public partial class BankSlip
    {
        [JsonProperty("digitable_line", NullValueHandling = NullValueHandling.Ignore)]
        public string DigitableLine { get; set; }

        [JsonProperty("barcode_data", NullValueHandling = NullValueHandling.Ignore)]
        public string BarcodeData { get; set; }

        [JsonProperty("barcode", NullValueHandling = NullValueHandling.Ignore)]
        public string Barcode { get; set; }
    }

    public partial class CustomVariable
    {
        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("value", NullValueHandling = NullValueHandling.Ignore)]
        public string Value { get; set; }
    }

    public partial class FinancialReturnDate
    {
        [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
        public long? Id { get; set; }

        [JsonProperty("installment", NullValueHandling = NullValueHandling.Ignore)]
        public long? Installment { get; set; }

        [JsonProperty("return_date", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? ReturnDate { get; set; }

        [JsonProperty("status", NullValueHandling = NullValueHandling.Ignore)]
        public string Status { get; set; }

        [JsonProperty("amount", NullValueHandling = NullValueHandling.Ignore)]
        public string Amount { get; set; }

        [JsonProperty("taxes", NullValueHandling = NullValueHandling.Ignore)]
        public string Taxes { get; set; }

        [JsonProperty("executed_date", NullValueHandling = NullValueHandling.Ignore)]
        public string ExecutedDate { get; set; }

        [JsonProperty("advanced", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Advanced { get; set; }
        [JsonIgnore]
        public InvoiceInstallmentmentStatus InstallmentStatus
        {
            get
            {
                switch (Status)
                {
                    case "done": return InvoiceInstallmentmentStatus.Paid;
                    case "pending": return InvoiceInstallmentmentStatus.Pending;
                    default: return InvoiceInstallmentmentStatus.Pending;
                }
            }
        }
    }

    public partial class Item
    {
        [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
        public string Id { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        [JsonProperty("price_cents", NullValueHandling = NullValueHandling.Ignore)]
        public long? PriceCents { get; set; }

        [JsonProperty("quantity", NullValueHandling = NullValueHandling.Ignore)]
        public long? Quantity { get; set; }

        [JsonProperty("created_at", NullValueHandling = NullValueHandling.Ignore)]
        public string CreatedAt { get; set; }

        [JsonProperty("updated_at", NullValueHandling = NullValueHandling.Ignore)]
        public string UpdatedAt { get; set; }

        [JsonProperty("price", NullValueHandling = NullValueHandling.Ignore)]
        public string Price { get; set; }
    }

    public partial class Log
    {
        [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
        public string Id { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        [JsonProperty("notes", NullValueHandling = NullValueHandling.Ignore)]
        public string Notes { get; set; }

        [JsonProperty("created_at", NullValueHandling = NullValueHandling.Ignore)]
        public string CreatedAt { get; set; }
    }

    public partial class Log
    {
        public static AdditionalInfo ToAdditionalInfo(Log log)
        {
            return new AdditionalInfo
            {
                Title = log.Description,
                Description = log.Notes
            };
        }

        public static List<AdditionalInfo> ToAdditionalInfo(List<Log> logs)
        {
            return logs.Select(x => new AdditionalInfo
            {
                Title = x.Description,
                Description = x.Notes
            }).ToList();

        }
    }

    public partial class Variable
    {
        [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
        public string Id { get; set; }

        [JsonProperty("variable", NullValueHandling = NullValueHandling.Ignore)]
        public string VariableVariable { get; set; }

        [JsonProperty("value", NullValueHandling = NullValueHandling.Ignore)]
        public string Value { get; set; }
    }

    public class IuguInvoiceListData
    {
        public IuguInvoiceListData()
        {
            Invoices = new List<IuguInvoice>();
        }

        [JsonProperty("items")]
        public IList<IuguInvoice> Invoices { get; set; }
        [JsonProperty("totalItems")]
        public int TotalInvoices { get; set; }
    }
}
